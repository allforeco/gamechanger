from django.template import loader
from django.http import HttpResponse
from .models import Location, Country

'''
???chached locations
'''
static_location_file = "/var/www/gamechanger.eco/static/cached_locations.htmlbody"

'''
???locations list view
___static/generated by loginstatus
'''
def locations_view(request):
  #print(f"LEND {len(list(Location.objects.all()))} | {len(Location.valid_ids())}")
  #Country.generate()
  logginbypass = True
  locations_dict = dict()
  #FIXME: Remove static template file
  #template = loader.get_template('static/locations_overview.html')
  template = loader.get_template('action/spooled_locations_overview.html')
  htmlbody = ""

  if request.user.is_authenticated or logginbypass:
    template = loader.get_template('action/locations_overview.html')
    for c in Country.objects.exclude(id=Country.UNKNOWN).exclude(code=None).order_by('name'):
      cl = Location.objects.filter(in_country=c, name=c.name).first()
      ls = Location.objects.filter(in_country=c)
      lsf = Location.objects.none()
      for l in ls:
        if Location.Duplicate_is_prime(l):
          lsf |= Location.objects.filter(id=l.id)
      locations_dict[cl] = lsf.order_by('name')
  else:
    try:
      with open(static_location_file, "r") as text:
        htmlbody = text.read()
    except:
      htmlbody = """<tr><td colspan="2"><h1>Data currently not available.</h1></td></tr>"""

  #print(locations_dict.values())
  context = {
    'locations_dict': locations_dict,
    'logginbypass': logginbypass,
    'htmlbody': htmlbody,
  }

  return HttpResponse(template.render(context, request))